version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: suldlss/dlme-transform
    docker:
    - image: cimg/base:stable
jobs:
  test:
    docker:
      - image: cimg/ruby:2.7
    steps:
      - checkout

      # Upgrade bundler
      - run:
          name: Install Bundler
          command: gem install bundler

      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      - restore_cache:
          keys:
          - app-bundle-v2-{{ checksum "Gemfile.lock" }}
          - app-bundle-v2-

      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: app-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
          - vendor/bundle

      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build

      - run:
          name: Copy data files over for integration tests
          command: |
            curl -L https://github.com/sul-dlss/dlme-metadata/archive/main.zip > main.zip
            unzip -q main.zip
            mv dlme-metadata-main/* data/

      - run:
          name: Run Rubocop and RSpec tests
          command: bundle exec rake

      - run:
          name: Send coverage report to Code Climate
          command: |
            ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?

  build-image:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build --build-arg VCS_REF=`git rev-parse --short HEAD` \
                      --build-arg VCS_URL=`git config --get remote.origin.url` \
                      --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                      --build-arg HONEYBADGER_API_KEY=$HONEYBADGER_API_KEY \
                      . -t $IMAGE_NAME:latest

      - run:
          name: Archive Docker image
          command: |
            docker save -o image.tar $IMAGE_NAME

      - persist_to_workspace:
          root: .
          paths:
          - ./image.tar

  publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: |
            docker load -i /tmp/workspace/image.tar

      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push $IMAGE_NAME:latest

  publish-tag:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: |
            docker load -i /tmp/workspace/image.tar

      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$CIRCLE_TAG
            docker push $IMAGE_NAME:$CIRCLE_TAG

workflows:
  version: 2
  test:
    jobs:
      - test
  build:
    jobs:
      - build-image:
          filters:
            branches:
              only: main
      - publish-latest:
          requires:
          - build-image
          filters:
            branches:
              only: main
  build-tags:
    jobs:
      - build-image:
          filters:
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+/
            branches:
              ignore: /.*/
      - publish-tag:
          requires:
          - build-image
          filters:
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+/
            branches:
              ignore: /.*/
